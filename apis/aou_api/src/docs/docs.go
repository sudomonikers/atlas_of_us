// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/secure/graph/create-node": {
            "post": {
                "description": "Creates a new node with the given labels and properties.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "create-node",
                "parameters": [
                    {
                        "description": "Request body for creating a node",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateNodeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/secure/graph/create-relationship": {
            "post": {
                "description": "Creates a new relationship of the given type between two nodes identified by their element IDs.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "create-relationship",
                "parameters": [
                    {
                        "description": "Request body for creating a relationship",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.CreateRelationshipRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/secure/graph/get-node-with-relationships-by-id": {
            "get": {
                "description": "Get a node from the graph by id and also retrieves its relationships",
                "produces": [
                    "application/json"
                ],
                "operationId": "get-node-with-relationships-by-id",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Node element ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/secure/graph/get-nodes": {
            "get": {
                "description": "Retrieves nodes based on labels and properties.",
                "produces": [
                    "application/json"
                ],
                "operationId": "get-nodes",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comma-separated list of labels",
                        "name": "labels",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "URL encoded comma-separated list of property key-value pairs",
                        "name": "properties",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/secure/graph/similar-nodes": {
            "post": {
                "description": "Finds nodes similar to a node specified by its element ID or by a vector embedding.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "find-similar-nodes",
                "parameters": [
                    {
                        "description": "Request body for finding similar nodes",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.FindSimilarNodesRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/secure/graph/update-node": {
            "put": {
                "description": "Updates the labels and/or properties of an existing node identified by its element ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "update-node",
                "parameters": [
                    {
                        "description": "Request body for updating a node",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateNodeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/secure/graph/update-relationship": {
            "put": {
                "description": "Updates the properties of an existing relationship identified by its element ID.  If the relationship type is provided, the existing relationship is deleted and a new one is created with the new type.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "operationId": "update-relationship",
                "parameters": [
                    {
                        "description": "Request body for updating a relationship",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.UpdateRelationshipRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.CreateNodeRequest": {
            "type": "object",
            "required": [
                "labels",
                "properties"
            ],
            "properties": {
                "labels": {
                    "description": "Labels is an array of labels to assign to the new node\nExample: [\"L1\", \"Pursuit\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "properties": {
                    "description": "Properties is a map of property key-value pairs for the new node\nExample: {\"name\": \"Cross Country Skiing\", \"description\": \"The activity of cross-country skiing, a form of skiing where skiers move over relatively flat terrain.\"}",
                    "type": "object",
                    "additionalProperties": {}
                }
            }
        },
        "handlers.CreateRelationshipRequest": {
            "type": "object",
            "required": [
                "sourceId",
                "targetId",
                "type"
            ],
            "properties": {
                "properties": {
                    "description": "Properties is an optional map of property key-value pairs for the relationship\nExample: {\"fromDate\": \"2023-01-15\", \"strength\": 0.85}",
                    "type": "object",
                    "additionalProperties": {}
                },
                "sourceId": {
                    "description": "SourceId is the element ID of the source node\nExample: \"4:7f3adc9f-8a7b-48e6-9c5d-12e34f56a7b8:0\"",
                    "type": "string"
                },
                "targetId": {
                    "description": "TargetId is the element ID of the target node\nExample: \"4:9a8b7c6d-5e4f-3a2b-1c0d-12e34f56a7b8:0\"",
                    "type": "string"
                },
                "type": {
                    "description": "Type is the relationship type to create\nExample: \"RELATES_TO\"",
                    "type": "string"
                }
            }
        },
        "handlers.FindSimilarNodesRequest": {
            "type": "object",
            "properties": {
                "embedding": {
                    "description": "Embedding is the vector embedding to use for similarity search\nExample: [0.1, 0.23, -0.45, 0.67, ...]",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "limit": {
                    "description": "Limit is the maximum number of similar nodes to return (optional, defaults to 5)",
                    "type": "integer"
                },
                "nodeId": {
                    "description": "NodeId is the element ID of the node to find similar nodes for\nExample: \"4:9a8b7c6d-5e4f-3a2b-1c0d-12e34f56a7b8:0\"",
                    "type": "string"
                }
            }
        },
        "handlers.UpdateNodeRequest": {
            "type": "object",
            "required": [
                "targetId"
            ],
            "properties": {
                "labels": {
                    "description": "Labels is an array of labels to set on the node\nExample: [\"L1\", \"Pursuit\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "properties": {
                    "description": "Properties is a map of property key-value pairs to update on the node\nExample: {\"name\": \"Cross Country Skiing\", \"description\": \"The activity of cross-country skiing, a form of skiing where skiers move over relatively flat terrain.\"}",
                    "type": "object",
                    "additionalProperties": {}
                },
                "targetId": {
                    "description": "TargetId is the element ID of the target node\nExample: \"4:9a8b7c6d-5e4f-3a2b-1c0d-12e34f56a7b8:0\"",
                    "type": "string"
                }
            }
        },
        "handlers.UpdateRelationshipRequest": {
            "type": "object",
            "required": [
                "targetId",
                "type"
            ],
            "properties": {
                "properties": {
                    "description": "Properties is an optional map of property key-value pairs for the relationship\nExample: {\"fromDate\": \"2023-01-15\", \"strength\": 0.85}",
                    "type": "object",
                    "additionalProperties": {}
                },
                "targetId": {
                    "description": "TargetId is the element ID of the target relationship\nExample: \"5:9a8b7c6d-5e4f-3a2b-1c0d-12e34f56a7b8:0\"",
                    "type": "string"
                },
                "type": {
                    "description": "Type is the relationship type to update\nExample: \"RELATES_TO\"",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
